{"version":3,"file":"burstjs.util.min.js","sources":["../src/convertNQTStringToNumber.ts","../src/internal.ts","../src/convertBurstTimeToEpochTime.ts","../src/isBurstAddress.ts","../src/index.ts","../src/constructBurstAddress.ts","../src/convertAddressToNumericId.ts","../src/convertBurstTimeToDate.ts","../src/convertDateToBurstTime.ts","../src/convertNumberToNQTString.ts","../src/convertNumericIdToAddress.ts","../src/splitBurstAddress.ts","../src/sumNQTStringToNumber.ts"],"sourcesContent":["/** @module util */\n\n/**\n * Original work Copyright (c) 2018 PoC-Consortium\n * Modified work Copyright (c) 2019 Burst Apps Team\n */\n\n/**\n * Helper method to convert a String to number\n * @param amount The amount in NQT\n * @return A number expressed in Burst (not NQT)\n * @throws exception if argument is invalid\n */\nexport const convertNQTStringToNumber = (amount: string): number => {\n\n    if (amount === undefined ||\n        amount === null ||\n        amount === '') {\n        throw new Error('Invalid argument');\n    }\n\n    return parseFloat(amount) / 100000000;\n};\n","/** @ignore */\n/** @module util */\n\n// tslint:disable:max-line-length\n/*\n * Original work Copyright (c) 2018 PoC-Consortium\n * Modified work Copyright (c) 2019 Burst Apps Team\n */\n\n\n// Internal helper functions and structures\nexport const GenesisBlockTime = Date.UTC(2014, 7, 11, 2, 0, 0, 0) / 1000;\nexport const initialCodeword = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\nexport const gexp: number[] = [1, 2, 4, 8, 16, 5, 10, 20, 13, 26, 17, 7, 14, 28, 29, 31, 27, 19, 3, 6, 12, 24, 21, 15, 30, 25, 23, 11, 22, 9, 18, 1];\nexport const glog: number[] = [0, 0, 1, 18, 2, 5, 19, 11, 3, 29, 6, 27, 20, 8, 12, 23, 4, 10, 30, 17, 7, 22, 28, 26, 21, 25, 9, 16, 13, 14, 24, 15];\nexport const cwmap: number[] = [3, 2, 1, 0, 7, 6, 5, 4, 13, 14, 15, 16, 12, 8, 9, 10, 11];\nexport const alphabet: string[] = '23456789ABCDEFGHJKLMNPQRSTUVWXYZ'.split('');\nexport const base32Length = 13;\n\nexport const ginv = (a) => {\n    return gexp[31 - glog[a]];\n};\n\nexport const gmult = (a, b) => {\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n\n    const idx = (glog[a] + glog[b]) % 31;\n\n    return gexp[idx];\n};\n\n","// tslint:disable:no-bitwise\n/** @module util */\n\nimport {GenesisBlockTime} from './internal';\n\n/**\n * Original work Copyright (c) 2019 Burst Apps Team\n */\n\n/**\n * Converts a Burst/Block Time (seconds since genesis block) into Unix Epoch Time (milliseconds since 01.01.1970)\n * @param burstTimestamp The numeric Id\n * @return Unix Epoch Time (milliseconds since 01.01.1970)\n */\nexport const convertBurstTimeToEpochTime = (burstTimestamp: number): number => {\n    return  (GenesisBlockTime + burstTimestamp) * 1000;\n};\n","// tslint:disable:no-bitwise\n/** @module util */\n/**\n * Original work Copyright (c) 2018 PoC-Consortium\n * Modified work Copyright (c) 2019 Burst Apps Team\n */\n\nimport { initialCodeword, alphabet, cwmap, gexp, gmult } from './internal';\n\n\n/**\n * Check for valid Burst address (format: BURST-XXXX-XXXX-XXXX-XXXXX, XXXX-XXXX-XXXX-XXXXX)\n * @param {string} address The address\n * @return {boolean} true, if is a valid address, else false\n */\nexport const isValid = (address: string): boolean => {\n    if (address.indexOf('BURST-') === 0) {\n        address = address.substr(6);\n    }\n\n    const codeword = initialCodeword.slice();\n    let codewordLength = 0;\n\n    for (let i = 0; i < address.length; i++) {\n        const pos = alphabet.indexOf(address.charAt(i));\n\n        if (pos <= -1 || pos > alphabet.length) {\n            continue;\n        }\n\n        if (codewordLength > 16) {\n            return false;\n        }\n\n        const codeworkIndex = cwmap[codewordLength];\n        codeword[codeworkIndex] = pos;\n        codewordLength++;\n    }\n\n    if (codewordLength !== 17) {\n        return false;\n    }\n\n    let sum = 0;\n\n    for (let i = 1; i < 5; i++) {\n        let t = 0;\n\n        for (let j = 0; j < 31; j++) {\n            if (j > 12 && j < 27) {\n                continue;\n            }\n\n            let pos = j;\n            if (j > 26) {\n                pos -= 14;\n            }\n\n            t ^= gmult(codeword[pos], gexp[(i * j) % 31]);\n        }\n\n        sum |= t;\n    }\n\n    return (sum === 0);\n};\n\n\n/**\n * Check for valid Burst address (format: BURST-XXXX-XXXX-XXXX-XXXXX, XXXX-XXXX-XXXX-XXXXX)\n * @note This is with prior quick check\n * @param {string} address The address\n * @return {boolean} true, if is a valid address, else false\n */\nexport const isBurstAddress = (address: string): boolean => {\n    return /^BURST\\-[A-Z0-9]{4}\\-[A-Z0-9]{4}\\-[A-Z0-9]{4}\\-[A-Z0-9]{5}/i\n        .test(address) && isValid(address);\n};\n\n\n","/** @module util */\nexport * from './constructBurstAddress';\nexport * from './convertNumberToNQTString';\nexport * from './convertNQTStringToNumber';\nexport * from './convertNumericIdToAddress';\nexport * from './convertBurstTimeToEpochTime';\nexport * from './convertBurstTimeToDate';\nexport * from './convertDateToBurstTime';\nexport * from './convertAddressToNumericId';\nexport * from './isBurstAddress';\nexport * from './splitBurstAddress';\nexport * from './sumNQTStringToNumber';\n\n/**\n * A useful regex for matching burst addresses\n *\n */\n    // TODO: I doubt that this should be in the lib. Very UI specific\nexport const burstAddressPattern = {\n    '_': {pattern: new RegExp('\\[a-zA-Z0-9\\]')}\n};\n","/** @module util */\n\n/**\n * Original work Copyright (c) 2018 PoC-Consortium\n * Modified work Copyright (c) 2019 Burst Apps Team\n */\n\n/**\n * Construct a Burst address from a string array\n * @param parts 4 parts string array\n */\nexport const constructBurstAddress = (parts: string[]): string => {\n    return 'BURST-' + parts[0] + '-' + parts[1] + '-' + parts[2] + '-' + parts[3];\n};\n\n","/** @module util */\n// tslint:disable:no-bitwise\n\n/**\n * Original work Copyright (c) 2018 PoC-Consortium\n * Modified work Copyright (c) 2019 Burst Apps Team\n */\n\nimport { base32Length, cwmap, alphabet, initialCodeword } from './internal';\nimport { isValid } from './isBurstAddress';\n\n/**\n * Converts BURST-XXXX-XXXX-XXXX-XXXXX into numeric Id\n * @param address The BURST address\n * @return The numeric id, or undefined if address is invalid\n */\n    // @todo review, maybe better throwing exception\nexport const convertAddressToNumericId = (address: string): string => {\n\n    if (address === undefined ||\n        address === null ||\n        address.trim().length === 0) {\n        return undefined;\n    }\n\n    if (address.indexOf('BURST-') === 0) {\n        address = address.substr(6);\n    } else {\n        return undefined;\n    }\n\n    const codeword = initialCodeword.slice();\n    let codewordLength = 0;\n\n    for (let i = 0; i < address.length; i++) {\n        const pos = alphabet.indexOf(address.charAt(i));\n\n        if (pos <= -1 || pos > alphabet.length) {\n            continue;\n        }\n\n        if (codewordLength > 16) {\n            return undefined;\n        }\n\n        const codeworkIndex = cwmap[codewordLength];\n        codeword[codeworkIndex] = pos;\n        codewordLength++;\n    }\n\n    if (!isValid(address)) {\n        return undefined;\n    }\n\n    let length = base32Length;\n    const cypherString32 = [];\n    for (let i = 0; i < length; i++) {\n        cypherString32[i] = codeword[length - i - 1];\n    }\n\n    let out = '',\n        newLength,\n        digit10 = 0;\n    do { // base 32 to base 10 conversion\n        newLength = 0;\n        digit10 = 0;\n\n        for (let i = 0; i < length; i++) {\n            digit10 = digit10 * 32 + cypherString32[i];\n\n            if (digit10 >= 10) {\n                cypherString32[newLength] = Math.floor(digit10 / 10);\n                digit10 %= 10;\n                newLength += 1;\n            } else if (newLength > 0) {\n                cypherString32[newLength] = 0;\n                newLength += 1;\n            }\n        }\n        length = newLength;\n        out += digit10;\n    } while (length > 0);\n\n    return out.split('').reverse().join('');\n};\n","/** @module util */\n\n/**\n * Original work Copyright (c) 2019 Burst Apps Team\n */\nimport {convertBurstTimeToEpochTime} from './convertBurstTimeToEpochTime';\n\n/**\n * Converts a Burst/Block Time (seconds since genesis block) into Date\n * @param burstTimestamp The numeric Id\n * @return Date\n */\nexport const convertBurstTimeToDate = (burstTimestamp: number): Date => {\n    return  new Date(convertBurstTimeToEpochTime(burstTimestamp));\n};\n","/** @module util */\n\n/**\n * Original work Copyright (c) 2019 Burst Apps Team\n */\nimport {GenesisBlockTime} from './internal';\n\n/**\n * Converts a Date into Burst/Block Time (seconds since genesis block)\n * @param date The date to be converted\n * @return The Burst Timestamp\n */\nexport const convertDateToBurstTime = (date: Date): number => {\n    return Math.round(date.getTime() / 1000) - GenesisBlockTime;\n};\n","/** @module util */\n\n/**\n * Original work Copyright (c) 2018 PoC-Consortium\n * Modified work Copyright (c) 2019 Burst Apps Team\n */\n\n/**\n * Helper method to Number to String(8 decimals) representation\n * @param n the number\n * @return a NQT number string\n */\nexport const convertNumberToNQTString = (n: number): string => {\n\n    if (n === undefined || n === null) { throw new Error('Invalid argument'); }\n\n    return parseFloat(n.toString())\n        .toFixed(8)\n        .replace('.', '');\n};\n","// tslint:disable:no-bitwise\n/** @module util */\n\n/**\n * Original work Copyright (c) 2018 PoC-Consortium\n * Modified work Copyright (c) 2019 Burst Apps Team\n */\n\nimport { initialCodeword, base32Length, gmult, alphabet, cwmap } from './internal';\n\n\n/**\n * Encode a numeric id into BURST-XXXX-XXXX-XXXX-XXXXX\n * @param numericId The numeric Id\n * @return the BURST address in Reed-Solomon encoding, or undefined if passed null, undefined\n */\nexport const convertNumericIdToAddress = (numericId: string): string => {\n\n    if (numericId  === undefined ||\n        numericId  === null ||\n        numericId.trim().length === 0) {\n        return undefined;\n    }\n\n    const plainString10 = [],\n        codeword = initialCodeword.slice();\n    let pos = 0;\n\n    let length = numericId.length;\n\n    for (let i = 0; i < length; i++) {\n        plainString10[i] = numericId.charCodeAt(i) - '0'.charCodeAt(0);\n    }\n\n    let digit32 = 0,\n        newLength = 0;\n    do {\n        digit32 = 0;\n        newLength = 0;\n        for (let i = 0; i < length; i++) {\n            digit32 = digit32 * 10 + plainString10[i];\n            if (digit32 >= 32) {\n                plainString10[newLength] = digit32 >> 5;\n                digit32 &= 31;\n                newLength++;\n            } else if (newLength > 0) {\n                plainString10[newLength] = 0;\n                newLength++;\n            }\n        }\n\n        length = newLength;\n        codeword[pos] = digit32;\n        pos++;\n    }\n    while (length > 0);\n\n    const p = [0, 0, 0, 0];\n\n    for (let i = base32Length - 1; i >= 0; i--) {\n        const fb = codeword[i] ^ p[3];\n\n        p[3] = p[2] ^ gmult(30, fb);\n        p[2] = p[1] ^ gmult(6, fb);\n        p[1] = p[0] ^ gmult(9, fb);\n        p[0] = gmult(17, fb);\n    }\n\n    codeword[13] = p[0];\n    codeword[14] = p[1];\n    codeword[15] = p[2];\n    codeword[16] = p[3];\n\n    let out = 'BURST-';\n\n    for (let i = 0; i < 17; i++) {\n        out += alphabet[codeword[cwmap[i]]];\n\n        if ((i & 3) === 3 && i < 13) {\n            out += '-';\n        }\n    }\n\n    return out;\n};\n","/** @module util */\n\n/**\n * Original work Copyright (c) 2018 PoC-Consortium\n * Modified work Copyright (c) 2019 Burst Apps Team\n */\n\n/**\n * Split the Burst address string into an array of 4 parts\n * @param address A valid Burst address\n */\nexport const splitBurstAddress = (address: string): string[] => {\n    const parts: string[] = address.split('-');\n    parts.shift();\n    if (parts.length === 4) {\n        return parts;\n    } else {\n        return [];\n    }\n};\n\n","/** @module util */\nimport {convertNQTStringToNumber} from './convertNQTStringToNumber';\n\n/**\n * Modified work Copyright (c) 2019 Burst Apps Team\n */\n\n/**\n * Sums various NQT values and returns in Burst\n * @param nqts Variable amount list with NQT string\n * @return The sum of all amounts in BURST\n */\nexport function sumNQTStringToNumber(...nqts: string[]): number{\n    return nqts.reduce( (sum, v) => sum + convertNQTStringToNumber(v), 0);\n}\n"],"names":["convertNQTStringToNumber","amount","Error","parseFloat","GenesisBlockTime","Date","UTC","initialCodeword","gexp","glog","cwmap","alphabet","split","gmult","a","b","convertBurstTimeToEpochTime","burstTimestamp","isValid","address","indexOf","substr","codeword","slice","codewordLength","i","length","pos","charAt","sum","t","j","burstAddressPattern","pattern","RegExp","parts","trim","cypherString32","newLength","out","digit10","Math","floor","reverse","join","date","round","getTime","n","toString","toFixed","replace","numericId","plainString10","charCodeAt","digit32","p","base32Length","fb","test","shift","nqts","reduce","v"],"mappings":"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"}